const TeleBot = require('node-telegram-bot-api');
const TOKEN = '1105474594:AAG9yJt7Ip9wBc2TFyZ1omCIROabYgC8TUU';

const bot = new TeleBot(TOKEN, {
    polling: true
});
// http://t.me/NodejsFitBot

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    console.log(msg);
    if(msg.text){
        bot.sendMessage(chatId, `echo: ${msg.text}`);
    }
    else{
        bot.sendMessage(chatId, `Send a text message`);
    }
});
/*
Keep-Alive: тайм-аут = 5, макс = 1000
timeout: указывает минимальное количество времени, в течение которого простое соединение должно оставаться открытым (в секундах).
Обратите внимание, что тайм-ауты, превышающие тайм-аут TCP, могут игнорироваться, если на транспортном уровне не установлено TCP-сообщение keep-alive.
max: указывает максимальное количество запросов, которое можно отправить по этому соединению до его закрытия.
Если 0 это значение не учитывается для нетранслируемых соединений, так как в следующем ответе будет отправлен другой запрос.
HTTP-конвейер может использовать его для ограничения конвейерной работы.

"Когда у тебя будут данные я их сразу заберу и потом сразу же подключусь"

AJAX Long-Polling
1. Клиент запрашивает страницу у сервера, используя обычный http
2. Запрошенная страница выполняет JavaScript, который запрашивает файл от сервера.
3. Сервер НЕ реагирует на запрошенную информацию и ждет, пока не появится новой информации
4. Когда появляется новая информация, сервер отсылает ее клиенту
5. Клиент получает новую информацию и НЕМЕДЛЕННО отсылает другой запрос серверу, запуская процесс ожидания на нем снова.*/